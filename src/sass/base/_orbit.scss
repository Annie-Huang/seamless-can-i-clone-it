// demo only
body {
  font-family: system-ui;
  display: grid;
  min-height: 100vh;
  place-content: center;
  overflow: hidden;
}

.orbit {
  --size: 12rem;
  --speed: 120s;
  .center-image {
    width: var(--size);
    position: relative;
    // keep the center of the .center-image the same, move the image so you don't need to move every small circle
    // the 2rem = (12rem - 8rem) / 2
    //transform: translate(-2rem, -2rem);

    z-index: 10; // make center-image on top of <ul>

    img {
      position: absolute;
      transition: opacity 500ms;

      &:not(:first-child):hover {
        opacity: 0;
      }
    }
  }

  ul {
    // grid and place-item: center + absolute position to multiple children is a great solution to place all children into the middle the parent.
    // Now the circle no longer move.
    display: grid;
    place-items: center;

    width: var(--size);
    height: var(--size);
    //background: red;

    position: relative;
    list-style: none;
    transform-origin: center;
    animation: orbit var(--speed) linear infinite;

    &:hover {
      animation-play-state: paused;
    }
  }

  li {
    --icon-bg: pink;
    --text-bg: blue;

    position: absolute;
    width: 8rem;
    aspect-ratio: 1 / 1;
    border-radius: 50%;
    //overflow: hidden;
    font-weight: 500;
    color: var(--white-light);
    text-align: center;
    line-height: 1;

    display: grid;
    place-items: center;

    //animation: orbit 60s linear reverse infinite;

    &:hover {
      //animation-play-state: paused;
      --throb-play-state: paused;
    }

    @for $i from 0 through 7 {
      &:nth-child(#{$i + 1}) {
        --throb-delay: #{500ms * $i};
      }
    }

    & > * {
      width: 100%;
      height: 100%;
      display: grid;
      place-items: center;
      border-radius: inherit;

      position: absolute;
      // Don't use transform, use grid in the <li> level to center the children
      //top: 50%;
      //left: 50%;
      //transform: translate(-50%, -50%);
      //
      // The animation shorthand CSS property applies an animation between styles. It is a shorthand for
      // animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, and animation-play-state.
      // e.g animation: 3s ease-in 1s infinite reverse both running slidein;
      animation: orbit var(--speed) linear reverse infinite,
        throb 1s ease-in-out var(--throb-delay) infinite alternate;
      animation-play-state: var(--one, running),
        var(--throb-play-state, running);
    }

    > div {
      background-color: var(--icon-bg);
    }

    > p {
      background: var(--text-bg);
      transition: opacity 500ms;
      opacity: 0;
    }

    &:hover > p {
      opacity: 1;
      cursor: pointer;
    }
  }

  // The calculation is a^2 + a^2 = 15^2 => a = 10.61
  li:nth-child(1) {
    --icon-bg: var(--blue-light);
    --text-bg: var(--blue-dark);
    transform: translate(15rem, 0rem);
  }

  li:nth-child(2) {
    --icon-bg: var(--green-light);
    --text-bg: var(--green-dark);
    transform: translate(10.61rem, 10.61rem);
  }
  li:nth-child(3) {
    --icon-bg: var(--pink-light);
    --text-bg: var(--pink-dark);
    transform: translate(0, 15rem);
  }
  li:nth-child(4) {
    --icon-bg: var(--red-light);
    --text-bg: var(--red-dark);
    transform: translate(-10.61rem, 10.61rem);
  }
  li:nth-child(5) {
    --icon-bg: var(--brown-light);
    --text-bg: var(--brown-dark);
    transform: translate(-15rem, 0rem);
  }
  li:nth-child(6) {
    --icon-bg: var(--yellow-light);
    --text-bg: var(--yellow-dark);
    transform: translate(-10.61rem, -10.61rem);
  }
  li:nth-child(7) {
    --icon-bg: var(--purple-light);
    --text-bg: var(--purple-dark);
    transform: translate(0, -15rem);
  }
  li:nth-child(8) {
    --icon-bg: var(--orange-light);
    --text-bg: var(--orange-dark);
    transform: translate(10.61rem, -10.61rem);
  }
}

@keyframes orbit {
  100% {
    rotate: 1turn;
  }
}

@keyframes hold-position {
  100% {
    rotate: -1turn;
  }
}

@keyframes throb {
  100% {
    scale: 1.05;
  }
}
